package server;

import java.io.*;
import java.net.*;
import java.util.*;

public class GameServer {
    private static final int PORT = 12345;
    private Player leftPlayer;
    private Player rightPlayer;

    public static void main(String[] args) {
        new GameServer().start();
    }

    public void start() {
        System.out.println("Game server started...");
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            while (true) {
                Socket clientSocket = serverSocket.accept();
                assignPlayer(clientSocket);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private synchronized void assignPlayer(Socket clientSocket) {
        try {
            ObjectOutputStream out = new ObjectOutputStream(clientSocket.getOutputStream());
            ObjectInputStream in = new ObjectInputStream(clientSocket.getInputStream());

            if (leftPlayer == null) {
                leftPlayer = new Player(clientSocket, out, in, "LEFT");
                out.writeObject(new GameAction("ASSIGN_ROLE", "LEFT"));
                System.out.println("LEFT player connected.");
            } else if (rightPlayer == null) {
                rightPlayer = new Player(clientSocket, out, in, "RIGHT");
                out.writeObject(new GameAction("ASSIGN_ROLE", "RIGHT"));
                System.out.println("RIGHT player connected.");

                // 두 플레이어가 연결되었으므로 게임 시작
                startGame();
            } else {
            	out.writeObject(new GameAction("ERROR", "Server is full.")); // 에러 메시지
                clientSocket.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void startGame() {
        new Thread(leftPlayer).start();
        new Thread(rightPlayer).start();

        new Timer().scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                broadcastGameState();
            }
        }, 0, 100); // 100ms마다 게임 상태 동기화
    }
    
    private synchronized void broadcastGameState() {
        for (UnitState unitState : allUnits) { // 서버에 저장된 모든 유닛 상태 전송
            broadcast(new GameAction("UNIT_UPDATE", unitState, "SERVER"), null);
        }

        syncBuildingState("LEFT_FORTRESS", leftFortress.getHp());
        syncBuildingState("RIGHT_FORTRESS", rightFortress.getHp());
    }

 // 기존 broadcast 메서드에 동기화된 유닛 상태 전달
    private synchronized void broadcast(GameAction action, Player excludePlayer) {
        try {
            if (leftPlayer != excludePlayer) leftPlayer.sendAction(action);
            if (rightPlayer != excludePlayer) rightPlayer.sendAction(action);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // 새 유닛 상태 동기화 메서드 추가
    private synchronized void syncUnitState(UnitState unitState, Player sender) {
        GameAction action = new GameAction("UNIT_UPDATE", unitState, sender.role);
        broadcast(action, sender); // 모든 클라이언트에 상태 전송
        System.out.println("Broadcasted UNIT_UPDATE: " + unitState);
    }

    private synchronized void syncBuildingState(String buildingType, int hp) {
        UnitState buildingState = new UnitState(buildingType, "NONE", 0, 0, hp);
        GameAction action = new GameAction("BUILDING_UPDATE", buildingState, "SERVER");
        broadcast(action, null);
    }


    class Player implements Runnable {
        private Socket socket;
        private ObjectOutputStream out;
        private ObjectInputStream in;
        private String role;

        public Player(Socket socket, ObjectOutputStream out, ObjectInputStream in, String role) {
            this.socket = socket;
            this.out = out;
            this.in = in;
            this.role = role;
        }

        public void sendAction(GameAction action) throws IOException {
            out.writeObject(action);
            out.flush();
        }
       

        @Override
        public void run() {
            try {
                while (true) {
                    GameAction action = (GameAction) in.readObject();
                    System.out.println(role + " player sent: " + action);

                    if (action.getActionType().equals("SPAWN_UNIT")) {
                        // 유닛 상태를 모든 클라이언트에 동기화
                        syncUnitState(action.getUnitState(), this);
                    } else if (action.getActionType().equals("UNIT_UPDATE")) {
                        syncUnitState(action.getUnitState(), this);
                    } else if (action.getActionType().equals("BUILDING_UPDATE")) {
                        syncBuildingState(action.getUnitState().getUnitType(), action.getUnitState().getHp());
                    }
                }
            } catch (IOException | ClassNotFoundException e) {
                System.out.println(role + " player disconnected.");
                if (role.equals("LEFT")) leftPlayer = null;
                if (role.equals("RIGHT")) rightPlayer = null;
            }
        }


    }
}

