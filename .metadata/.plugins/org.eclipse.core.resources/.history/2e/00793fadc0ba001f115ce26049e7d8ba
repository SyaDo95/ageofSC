package Units;

import ageOfStarcraft.Building;
import java.awt.*;

public abstract class AbstractUnit implements Unit {
    protected int x;
    protected int y;
    protected int hp;
    protected int range;
    protected int attackPower;
    protected boolean isAttacking;

    public AbstractUnit(int x, int y, int hp, int range, int attackPower) {
        this.x = x;
        this.y = y;
        this.hp = hp;
        this.range = range;
        this.attackPower = attackPower;
        this.isAttacking = false;
    }

    @Override
    public int getX() { return x; }

    @Override
    public int getY() { return y; }

    @Override
    public int getRange() { return range; }

    @Override
    public void move(int dx) {
        if (!isAttacking) x += dx;
    }

    @Override
    public void attack(Building target) {
        target.takeDamage(attackPower);
        isAttacking = true;
    }

    @Override
    public void stopAttacking() {
        isAttacking = false;
    }

    @Override
    public void takeDamage(int damage) {
        hp -= damage;
        if (hp < 0) hp = 0;
    }

    @Override
    public boolean isDestroyed() { return hp <= 0; }


    @Override
    public boolean isInRange(Building enemyBuilding, String playerside) {
        int unitEdgeX;      // 유닛의 끝 좌표
        int buildingEdgeX;  // 건물의 끝 좌표

        if (playerside.equals("LEFT")) {
            // LEFT 플레이어: 유닛의 오른쪽 끝 좌표와 건물의 왼쪽 끝 좌표 비교
            unitEdgeX = x + width; // 유닛의 오른쪽 끝 x좌표
            buildingEdgeX = enemyBuilding.getX(); // 건물의 왼쪽 끝 x좌표
        } else {
            // RIGHT 플레이어: 유닛의 왼쪽 끝 좌표와 건물의 오른쪽 끝 좌표 비교
            unitEdgeX = x; // 유닛의 왼쪽 끝 x좌표
            buildingEdgeX = enemyBuilding.getX() + enemyBuilding.getWidth(); // 건물의 오른쪽 끝 x좌표
        }

        // 두 좌표 사이의 거리가 range 이내인지 확인
        int distance = Math.abs(unitEdgeX - buildingEdgeX);
        return distance <= range; // 범위 내에 있으면 true
    }
}
