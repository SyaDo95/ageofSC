package server;

import com.google.gson.Gson;
import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.List;

public class GameServer {
    private static final int PORT = 12345;
    private static final List<ObjectOutputStream> clientOutputs = new ArrayList<>();
    private static final GameState gameState = new GameState();

    public static void main(String[] args) {
        System.out.println("서버가 시작되었습니다...");

        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            while (true) {
                System.out.println("클라이언트 대기 중...");
                Socket clientSocket = serverSocket.accept();
                System.out.println("클라이언트 연결됨: " + clientSocket.getInetAddress());

                // 클라이언트 출력 스트림 생성
                ObjectOutputStream out = new ObjectOutputStream(clientSocket.getOutputStream());
                clientOutputs.add(out);

                // 클라이언트와 통신 처리 스레드 시작
                new Thread(new ClientHandler(clientSocket, out)).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // 클라이언트와 통신 처리
    private static class ClientHandler implements Runnable {
        private final Socket socket;
        private final ObjectOutputStream out;

        public ClientHandler(Socket socket, ObjectOutputStream out) {
            this.socket = socket;
            this.out = out;
        }

        @Override
        public void run() {
            try (ObjectInputStream in = new ObjectInputStream(socket.getInputStream())) {
                while (true) {
                    // 클라이언트로부터 데이터 수신
                    String receivedJson = (String) in.readObject(); // JSON 형식으로 데이터 수신
                    GameData receivedData = new Gson().fromJson(receivedJson, GameData.class); // JSON 파싱
                    System.out.println("클라이언트 명령: " + receivedData.getCommand());

                    // 게임 상태 업데이트
                    synchronized (gameState) {
                        processCommand(receivedData);
                    }

                    // 모든 클라이언트에 게임 상태 전송
                    broadcastGameState();
                }
            } catch (IOException | ClassNotFoundException e) {
                System.out.println("클라이언트 연결 끊김");
                clientOutputs.remove(out); // 클라이언트 연결 종료 시 리스트에서 제거
            }
        }

        private void broadcastGameState() {
            synchronized (gameState) {
                String gameStateJson = new Gson().toJson(gameState); // 게임 상태를 JSON으로 변환
                for (ObjectOutputStream clientOut : clientOutputs) {
                    try {
                        clientOut.writeObject(gameStateJson);
                        clientOut.flush();
                    } catch (IOException e) {
                        System.out.println("클라이언트 전송 중 오류 발생");
                        clientOutputs.remove(clientOut); // 전송 실패 시 제거
                    }
                }
            }
        }

        private void processCommand(GameData data) {
            switch (data.getCommand()) {
                case "SPAWN":
                    gameState.addUnit(new UnitState(100, 100, data.getUnitType())); // 예시 좌표
                    break;
                case "ATTACK":
                    if ("Marine".equals(data.getUnitType())) {
                        gameState.setRightCastleHp(gameState.getRightCastleHp() - 10); // 예시 로직
                    }
                    break;
                // 추가 명령어 처리 가능
                default:
                    System.out.println("알 수 없는 명령: " + data.getCommand());
            }
        }
    }
}

// 게임 상태를 관리하는 클래스
class GameState {
    private int leftCastleHp;
    private int rightCastleHp;
    private final List<UnitState> units;

    public GameState() {
        this.leftCastleHp = 1500; // 초기 HP
        this.rightCastleHp = 1500;
        this.units = new ArrayList<>();
    }

    public int getLeftCastleHp() {
        return leftCastleHp;
    }

    public void setLeftCastleHp(int leftCastleHp) {
        this.leftCastleHp = leftCastleHp;
    }

    public int getRightCastleHp() {
        return rightCastleHp;
    }

    public void setRightCastleHp(int rightCastleHp) {
        this.rightCastleHp = rightCastleHp;
    }

    public List<UnitState> getUnits() {
        return units;
    }

    public void addUnit(UnitState unit) {
        this.units.add(unit);
    }
}

class UnitState {
    private int x;
    private int y;
    private String type;

    public UnitState(int x, int y, String type) {
        this.x = x;
        this.y = y;
        this.type = type;
    }

    public int getX() {
        return x;
    }

    public void setX(int x) {
        this.x = x;
    }

    public int getY() {
        return y;
    }

    public void setY(int y) {
        this.y = y;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }
}

// 클라이언트에서 서버로 보낼 데이터 클래스
class GameData {
    private String command;
    private String unitType;

    public GameData(String command, String unitType) {
        this.command = command;
        this.unitType = unitType;
    }

    public String getCommand() {
        return command;
    }

    public void setCommand(String command) {
        this.command = command;
    }

    public String getUnitType() {
        return unitType;
    }

    public void setUnitType(String unitType) {
        this.unitType = unitType;
    }
}
