package server;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

public class Player implements Runnable {
    private Socket socket;
    private ObjectOutputStream out;
    private ObjectInputStream in;
    private String role;
    private GameServer server; // GameServer 참조

    public Player(Socket socket, ObjectOutputStream out, ObjectInputStream in, String role, GameServer server) {
        this.socket = socket;
        this.out = out;
        this.in = in;
        this.role = role;
        this.server = server;
    }

    public String getRole() {
        return role;
    }

    public void sendAction(GameAction action) {
        try {
            out.writeObject(action);
            out.flush();
        } catch (Exception e) {
            System.out.println("Failed to send action to " + role + " player.");
            cleanupResources();
        }
    }

    @Override
    public void run() {
        try {
            while (true) {
                GameAction action = (GameAction) in.readObject();
                System.out.println(role + " player sent: " + action);

                switch (action.getActionType()) {
                    case "SPAWN_UNIT":
                        handleSpawnRequest(action);
                        break;
                    case "UNIT_UPDATE":
                        handleUnitUpdate(action);
                        break;
                    case "BUILDING_UPDATE":
                        handleBuildingUpdate(action);
                        break;
                    default:
                        System.out.println("Unknown action type: " + action.getActionType());
                }
            }
        } catch (Exception e) {
            System.out.println(role + " player disconnected.");
            cleanupResources();
        }
    }

    private void handleSpawnRequest(GameAction action) {
        synchronized (GameServer.class) {
            try {
                if (server.getLeftPlayer() != this) {
                    server.getLeftPlayer().sendAction(action);
                }
                if (server.getRightPlayer() != this) {
                    server.getRightPlayer().sendAction(action);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void handleUnitUpdate(GameAction action) {
        synchronized (GameServer.class) {
            try {
                if (server.getLeftPlayer() != this) {
                    server.getLeftPlayer().sendAction(action);
                }
                if (server.getRightPlayer() != this) {
                    server.getRightPlayer().sendAction(action);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void handleBuildingUpdate(GameAction action) {
        synchronized (GameServer.class) {
            try {
                if (server.getLeftPlayer() != this) {
                    server.getLeftPlayer().sendAction(action);
                }
                if (server.getRightPlayer() != this) {
                    server.getRightPlayer().sendAction(action);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void cleanupResources() {
        try {
            if (socket != null) socket.close();
            if (out != null) out.close();
            if (in != null) in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
