package server;

import com.google.gson.Gson;
import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.List;

public class GameServer {
    private static final int PORT = 12345;
    private static final List<ObjectOutputStream> clientOutputs = new ArrayList<>();
    private static final GameState gameState = new GameState();

    public static void main(String[] args) {
        System.out.println("서버가 시작되었습니다...");

        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            while (true) {
                System.out.println("클라이언트 대기 중...");
                Socket clientSocket = serverSocket.accept();
                System.out.println("클라이언트 연결됨: " + clientSocket.getInetAddress());

                // 클라이언트 출력 스트림 생성
                ObjectOutputStream out = new ObjectOutputStream(clientSocket.getOutputStream());
                clientOutputs.add(out);

                // 클라이언트와 통신 처리 스레드 시작
                new Thread(new ClientHandler(clientSocket, out)).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // 클라이언트와 통신 처리
    private static class ClientHandler implements Runnable {
        private final Socket socket;
        private final ObjectOutputStream out;

        public ClientHandler(Socket socket, ObjectOutputStream out) {
            this.socket = socket;
            this.out = out;
        }

        @Override
        public void run() {
            try (BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {
                while (true) {
                    // 클라이언트로부터 JSON 데이터 수신
                    String receivedJson = in.readLine();
                    if (receivedJson == null) {
                        break; // 클라이언트 연결 끊김
                    }

                    // JSON을 GameData 객체로 파싱
                    GameData receivedData = new Gson().fromJson(receivedJson, GameData.class);
                    System.out.println("클라이언트 명령: " + receivedData.getCommand());

                    // 게임 상태 업데이트
                    synchronized (gameState) {
                        processCommand(receivedData);
                    }

                    // 모든 클라이언트에 게임 상태 전송
                    broadcastGameState();
                }
            } catch (IOException e) {
                System.out.println("클라이언트 연결 끊김");
            } finally {
                try {
                    socket.close();
                    clientOutputs.remove(out);
                } catch (IOException ignored) {
                }
            }
        }

        private void broadcastGameState() {
            synchronized (gameState) {
                String gameStateJson = new Gson().toJson(gameState); // 게임 상태를 JSON으로 변환
                for (ObjectOutputStream clientOut : clientOutputs) {
                    try {
                        clientOut.writeObject(gameStateJson);
                        clientOut.flush();
                    } catch (IOException e) {
                        System.out.println("클라이언트 전송 중 오류 발생");
                        clientOutputs.remove(clientOut); // 전송 실패 시 제거
                    }
                }
            }
        }

        private void processCommand(GameData data) {
            switch (data.getCommand()) {
                case "SPAWN":
                    gameState.addUnit(new UnitState(100, 100, data.getUnitType())); // 예시 좌표
                    break;
                case "ATTACK":
                    if ("Marine".equals(data.getUnitType())) {
                        gameState.setRightCastleHp(gameState.getRightCastleHp() - 10); // 예시 로직
                    }
                    break;
                default:
                    System.out.println("알 수 없는 명령: " + data.getCommand());
            }
        }
    }
}
